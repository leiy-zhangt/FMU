; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\usart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Basic\inc -I..\CMSIS -I..\Connectivity\IIC -I..\Connectivity\SPI -I..\Connectivity\USART -I..\HardWare\BMM150 -I..\HardWare\BUZZER -I..\HardWare\LED -I..\System\delay -I..\System\stm32f4xx_it -I..\System\sys -I..\System\system_stm32f4xx -I..\User -I..\System -I.\RTE\_Target_1 -ID:\ProgramFile\Keil5\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\ProgramFile\Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F405xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\usart.crf ..\Connectivity\USART\usart.c]
                          THUMB

                          AREA ||i.USART1_Configuration||, CODE, READONLY, ALIGN=2

                  USART1_Configuration PROC
;;;54     
;;;55     void USART1_Configuration(uint32_t bound,FunctionalState ITStatus){ //串口1初始化并启动
000000  b530              PUSH     {r4,r5,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;56       //GPIO端口设置
;;;57       GPIO_InitTypeDef GPIO_InitStructure;
;;;58     	USART_InitTypeDef USART_InitStructure;
;;;59     	NVIC_InitTypeDef NVIC_InitStructure;	 
;;;60     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);	//使能USART1时钟
000008  2101              MOVS     r1,#1
00000a  2010              MOVS     r0,#0x10
00000c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;61       RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);  
000010  2101              MOVS     r1,#1
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;62     	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1
000018  2207              MOVS     r2,#7
00001a  2109              MOVS     r1,#9
00001c  4822              LDR      r0,|L1.168|
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;63     	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1
000022  2207              MOVS     r2,#7
000024  210a              MOVS     r1,#0xa
000026  4820              LDR      r0,|L1.168|
000028  f7fffffe          BL       GPIO_PinAFConfig
;;;64       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10
00002c  f44f60c0          MOV      r0,#0x600
000030  9005              STR      r0,[sp,#0x14]
;;;65     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000032  2002              MOVS     r0,#2
000034  f88d0018          STRB     r0,[sp,#0x18]
;;;66     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
000038  f88d0019          STRB     r0,[sp,#0x19]
;;;67     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
00003c  2000              MOVS     r0,#0
00003e  f88d001a          STRB     r0,[sp,#0x1a]
;;;68     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
000042  2001              MOVS     r0,#1
000044  f88d001b          STRB     r0,[sp,#0x1b]
;;;69     	GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10
000048  a905              ADD      r1,sp,#0x14
00004a  4817              LDR      r0,|L1.168|
00004c  f7fffffe          BL       GPIO_Init
;;;70       //Usart1 NVIC 配置
;;;71       NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000050  2025              MOVS     r0,#0x25
000052  f88d0000          STRB     r0,[sp,#0]
;;;72     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0 ;//抢占优先级3
000056  2000              MOVS     r0,#0
000058  f88d0001          STRB     r0,[sp,#1]
;;;73     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
00005c  2003              MOVS     r0,#3
00005e  f88d0002          STRB     r0,[sp,#2]
;;;74     	NVIC_InitStructure.NVIC_IRQChannelCmd = ITStatus;			//IRQ通道使能
000062  f88d4003          STRB     r4,[sp,#3]
;;;75     	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器 
000066  4668              MOV      r0,sp
000068  f7fffffe          BL       NVIC_Init
;;;76        //USART 初始化设置
;;;77     	USART_InitStructure.USART_BaudRate = bound;//一般设置为9600;
00006c  9501              STR      r5,[sp,#4]
;;;78     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
00006e  2000              MOVS     r0,#0
000070  f8ad0008          STRH     r0,[sp,#8]
;;;79     	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000074  f8ad000a          STRH     r0,[sp,#0xa]
;;;80     	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
000078  f8ad000c          STRH     r0,[sp,#0xc]
;;;81     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
00007c  f8ad0010          STRH     r0,[sp,#0x10]
;;;82     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
000080  200c              MOVS     r0,#0xc
000082  f8ad000e          STRH     r0,[sp,#0xe]
;;;83       USART_Init(USART1, &USART_InitStructure); //初始化串口
000086  a901              ADD      r1,sp,#4
000088  4808              LDR      r0,|L1.172|
00008a  f7fffffe          BL       USART_Init
;;;84       USART_ITConfig(USART1, USART_IT_RXNE, ITStatus);//开启ENABLE/关闭DISABLE中断
00008e  4622              MOV      r2,r4
000090  f2405125          MOV      r1,#0x525
000094  4805              LDR      r0,|L1.172|
000096  f7fffffe          BL       USART_ITConfig
;;;85       USART_Cmd(USART1, ENABLE);                    //使能串口 
00009a  2101              MOVS     r1,#1
00009c  4803              LDR      r0,|L1.172|
00009e  f7fffffe          BL       USART_Cmd
;;;86     }
0000a2  b007              ADD      sp,sp,#0x1c
0000a4  bd30              POP      {r4,r5,pc}
;;;87     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      0x40020000
                  |L1.172|
                          DCD      0x40011000

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  USART1_IRQHandler PROC
;;;87     
;;;88     void USART1_IRQHandler(void){ //串口1中断服务程序（固定的函数名不能修改）	
000000  b510              PUSH     {r4,lr}
;;;89     	uint8_t Res;
;;;90     	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET){  //接收中断(接收到的数据必须是0x0d 0x0a结尾)		
000002  f2405125          MOV      r1,#0x525
000006  481f              LDR      r0,|L2.132|
000008  f7fffffe          BL       USART_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d038              BEQ      |L2.130|
;;;91     		Res=USART_ReceiveData(USART1);//读取接收到的数据
000010  481c              LDR      r0,|L2.132|
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c4              UXTB     r4,r0
;;;92     		printf("%c",Res); //把收到的数据发送回电脑
000018  4621              MOV      r1,r4
00001a  a01b              ADR      r0,|L2.136|
00001c  f7fffffe          BL       __2printf
;;;93             if((USART1_RX_STA&0x8000)==0)//接收未完成
000020  481a              LDR      r0,|L2.140|
000022  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
000024  f4004000          AND      r0,r0,#0x8000
000028  bb58              CBNZ     r0,|L2.130|
;;;94     		{
;;;95     			if(USART1_RX_STA&0x4000)//接收到了0x0d
00002a  4818              LDR      r0,|L2.140|
00002c  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
00002e  f4004080          AND      r0,r0,#0x4000
000032  b160              CBZ      r0,|L2.78|
;;;96     			{
;;;97     				if(Res!=0x0a)USART1_RX_STA=0;//接收错误,重新开始
000034  2c0a              CMP      r4,#0xa
000036  d003              BEQ      |L2.64|
000038  2000              MOVS     r0,#0
00003a  4914              LDR      r1,|L2.140|
00003c  8008              STRH     r0,[r1,#0]
00003e  e020              B        |L2.130|
                  |L2.64|
;;;98     				else USART1_RX_STA|=0x8000;	//接收完成了 
000040  4812              LDR      r0,|L2.140|
000042  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
000044  f4404000          ORR      r0,r0,#0x8000
000048  4910              LDR      r1,|L2.140|
00004a  8008              STRH     r0,[r1,#0]
00004c  e019              B        |L2.130|
                  |L2.78|
;;;99     			}
;;;100    			else //还没收到0X0D
;;;101    			{	
;;;102    				if(Res==0x0d)USART1_RX_STA|=0x4000;
00004e  2c0d              CMP      r4,#0xd
000050  d106              BNE      |L2.96|
000052  480e              LDR      r0,|L2.140|
000054  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
000056  f4404080          ORR      r0,r0,#0x4000
00005a  490c              LDR      r1,|L2.140|
00005c  8008              STRH     r0,[r1,#0]
00005e  e010              B        |L2.130|
                  |L2.96|
;;;103    				else
;;;104    				{
;;;105    					USART1_RX_BUF[USART1_RX_STA&0X3FFF]=Res ;
000060  480a              LDR      r0,|L2.140|
000062  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
000064  f3c0000d          UBFX     r0,r0,#0,#14
000068  4909              LDR      r1,|L2.144|
00006a  540c              STRB     r4,[r1,r0]
;;;106    					USART1_RX_STA++;
00006c  4807              LDR      r0,|L2.140|
00006e  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
000070  1c40              ADDS     r0,r0,#1
000072  4906              LDR      r1,|L2.140|
000074  8008              STRH     r0,[r1,#0]
;;;107    					if(USART1_RX_STA>(USART1_REC_LEN-1))USART1_RX_STA=0;//接收数据错误,重新开始接收	  
000076  4608              MOV      r0,r1
000078  8800              LDRH     r0,[r0,#0]  ; USART1_RX_STA
00007a  2813              CMP      r0,#0x13
00007c  dd01              BLE      |L2.130|
00007e  2000              MOVS     r0,#0
000080  8008              STRH     r0,[r1,#0]
                  |L2.130|
;;;108    				}		 
;;;109    			}
;;;110    		}   	
;;;111    	} 
;;;112    } 
000082  bd10              POP      {r4,pc}
;;;113    
                          ENDP

                  |L2.132|
                          DCD      0x40011000
                  |L2.136|
000088  256300            DCB      "%c",0
00008b  00                DCB      0
                  |L2.140|
                          DCD      USART1_RX_STA
                  |L2.144|
                          DCD      USART1_RX_BUF

                          AREA ||i.USART1_printf||, CODE, READONLY, ALIGN=2

                  USART1_printf PROC
;;;41     */
;;;42     void USART1_printf (char *fmt, ...){ 
000000  b40f              PUSH     {r0-r3}
000002  b510              PUSH     {r4,lr}
000004  b088              SUB      sp,sp,#0x20
;;;43     	char buffer[USART1_REC_LEN+1];  // 数据长度
;;;44     	uint8_t i = 0;	
000006  2400              MOVS     r4,#0
;;;45     	va_list arg_ptr;
;;;46     	va_start(arg_ptr, fmt);  
000008  a80b              ADD      r0,sp,#0x2c
00000a  9001              STR      r0,[sp,#4]
;;;47     	vsnprintf(buffer, USART1_REC_LEN+1, fmt, arg_ptr);
00000c  2115              MOVS     r1,#0x15
00000e  a802              ADD      r0,sp,#8
000010  9b01              LDR      r3,[sp,#4]
000012  9a0a              LDR      r2,[sp,#0x28]
000014  f7fffffe          BL       vsnprintf
;;;48     	while ((i < USART1_REC_LEN) && (i < strlen(buffer))){
000018  e00e              B        |L3.56|
                  |L3.26|
;;;49             USART_SendData(USART1, (uint8_t) buffer[i++]);
00001a  4620              MOV      r0,r4
00001c  1c62              ADDS     r2,r4,#1
00001e  b2d4              UXTB     r4,r2
000020  aa02              ADD      r2,sp,#8
000022  5c11              LDRB     r1,[r2,r0]
000024  480b              LDR      r0,|L3.84|
000026  f7fffffe          BL       USART_SendData
;;;50             while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET); 
00002a  bf00              NOP      
                  |L3.44|
00002c  2140              MOVS     r1,#0x40
00002e  4809              LDR      r0,|L3.84|
000030  f7fffffe          BL       USART_GetFlagStatus
000034  2800              CMP      r0,#0
000036  d0f9              BEQ      |L3.44|
                  |L3.56|
000038  2c14              CMP      r4,#0x14              ;48
00003a  da04              BGE      |L3.70|
00003c  a802              ADD      r0,sp,#8              ;48
00003e  f7fffffe          BL       strlen
000042  42a0              CMP      r0,r4                 ;48
000044  d8e9              BHI      |L3.26|
                  |L3.70|
;;;51     	}
;;;52     	va_end(arg_ptr);
000046  2000              MOVS     r0,#0
000048  9001              STR      r0,[sp,#4]
;;;53     }
00004a  b008              ADD      sp,sp,#0x20
00004c  bc10              POP      {r4}
00004e  f85dfb14          LDR      pc,[sp],#0x14
;;;54     
                          ENDP

000052  0000              DCW      0x0000
                  |L3.84|
                          DCD      0x40011000

                          AREA ||i.USART2_Configuration||, CODE, READONLY, ALIGN=2

                  USART2_Configuration PROC
;;;145    
;;;146    void USART2_Configuration(uint32_t bound,FunctionalState ITStatus){ //串口1初始化并启动
000000  b530              PUSH     {r4,r5,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;147        //GPIO端口设置
;;;148        GPIO_InitTypeDef GPIO_InitStructure;
;;;149    	USART_InitTypeDef USART_InitStructure;
;;;150    	NVIC_InitTypeDef NVIC_InitStructure;	 
;;;151    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);	//使能USART1时钟
000008  2101              MOVS     r1,#1
00000a  0448              LSLS     r0,r1,#17
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;152        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);  
000010  2101              MOVS     r1,#1
000012  4608              MOV      r0,r1
000014  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;153    	GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); //GPIOA2复用为USART1
000018  2207              MOVS     r2,#7
00001a  2102              MOVS     r1,#2
00001c  4821              LDR      r0,|L4.164|
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;154    	GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); //GPIOA3复用为USART1
000022  2207              MOVS     r2,#7
000024  2103              MOVS     r1,#3
000026  481f              LDR      r0,|L4.164|
000028  f7fffffe          BL       GPIO_PinAFConfig
;;;155        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; //GPIOA9与GPIOA10
00002c  200c              MOVS     r0,#0xc
00002e  9005              STR      r0,[sp,#0x14]
;;;156    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000030  2002              MOVS     r0,#2
000032  f88d0018          STRB     r0,[sp,#0x18]
;;;157    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
000036  f88d0019          STRB     r0,[sp,#0x19]
;;;158    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
00003a  2000              MOVS     r0,#0
00003c  f88d001a          STRB     r0,[sp,#0x1a]
;;;159    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
000040  2001              MOVS     r0,#1
000042  f88d001b          STRB     r0,[sp,#0x1b]
;;;160    	GPIO_Init(GPIOA,&GPIO_InitStructure); 
000046  a905              ADD      r1,sp,#0x14
000048  4816              LDR      r0,|L4.164|
00004a  f7fffffe          BL       GPIO_Init
;;;161       //Usart1 NVIC 配置
;;;162        NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00004e  2026              MOVS     r0,#0x26
000050  f88d0000          STRB     r0,[sp,#0]
;;;163    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3
000054  2003              MOVS     r0,#3
000056  f88d0001          STRB     r0,[sp,#1]
;;;164    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
00005a  f88d0002          STRB     r0,[sp,#2]
;;;165    	NVIC_InitStructure.NVIC_IRQChannelCmd = ITStatus;			//IRQ通道使能
00005e  f88d4003          STRB     r4,[sp,#3]
;;;166    	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器 
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       NVIC_Init
;;;167       //USART 初始化设置
;;;168    	USART_InitStructure.USART_BaudRate = bound;//一般设置为9600;
000068  9501              STR      r5,[sp,#4]
;;;169    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
00006a  2000              MOVS     r0,#0
00006c  f8ad0008          STRH     r0,[sp,#8]
;;;170    	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000070  f8ad000a          STRH     r0,[sp,#0xa]
;;;171    	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
000074  f8ad000c          STRH     r0,[sp,#0xc]
;;;172    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
000078  f8ad0010          STRH     r0,[sp,#0x10]
;;;173    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
00007c  200c              MOVS     r0,#0xc
00007e  f8ad000e          STRH     r0,[sp,#0xe]
;;;174        USART_Init(USART2, &USART_InitStructure); //初始化串口
000082  a901              ADD      r1,sp,#4
000084  4808              LDR      r0,|L4.168|
000086  f7fffffe          BL       USART_Init
;;;175        USART_ITConfig(USART2, USART_IT_RXNE, ITStatus);//开启ENABLE/关闭DISABLE中断
00008a  4622              MOV      r2,r4
00008c  f2405125          MOV      r1,#0x525
000090  4805              LDR      r0,|L4.168|
000092  f7fffffe          BL       USART_ITConfig
;;;176        USART_Cmd(USART2, ENABLE);                    //使能串口 
000096  2101              MOVS     r1,#1
000098  4803              LDR      r0,|L4.168|
00009a  f7fffffe          BL       USART_Cmd
;;;177    }
00009e  b007              ADD      sp,sp,#0x1c
0000a0  bd30              POP      {r4,r5,pc}
;;;178    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      0x40020000
                  |L4.168|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;204    
;;;205    void USART2_IRQHandler(void){ //串口2中断服务程序（固定的函数名不能修改）	
000000  b510              PUSH     {r4,lr}
;;;206        uint8_t Res;
;;;207    	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET){  //接收中断(接收到的数据必须是0x0d 0x0a结尾)	
000002  f2405125          MOV      r1,#0x525
000006  480f              LDR      r0,|L5.68|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b1c0              CBZ      r0,|L5.64|
;;;208            USART_ClearITPendingBit(USART2, USART_IT_RXNE);
00000e  f2405125          MOV      r1,#0x525
000012  480c              LDR      r0,|L5.68|
000014  f7fffffe          BL       USART_ClearITPendingBit
;;;209    		Res=USART_ReceiveData(USART2);
000018  480a              LDR      r0,|L5.68|
00001a  f7fffffe          BL       USART_ReceiveData
00001e  b2c4              UXTB     r4,r0
;;;210            USART_ITConfig(USART2, USART_IT_RXNE,DISABLE);
000020  2200              MOVS     r2,#0
000022  f2405125          MOV      r1,#0x525
000026  4807              LDR      r0,|L5.68|
000028  f7fffffe          BL       USART_ITConfig
;;;211            USART_SendData(USART1,Res);
00002c  4621              MOV      r1,r4
00002e  4806              LDR      r0,|L5.72|
000030  f7fffffe          BL       USART_SendData
;;;212            USART_ITConfig(USART2, USART_IT_RXNE,ENABLE);
000034  2201              MOVS     r2,#1
000036  f2405125          MOV      r1,#0x525
00003a  4802              LDR      r0,|L5.68|
00003c  f7fffffe          BL       USART_ITConfig
                  |L5.64|
;;;213    	} 
;;;214    } 
000040  bd10              POP      {r4,pc}
;;;215    
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      0x40004400
                  |L5.72|
                          DCD      0x40011000

                          AREA ||i.USART2_printf||, CODE, READONLY, ALIGN=2

                  USART2_printf PROC
;;;131    */
;;;132    void USART2_printf (char *fmt, ...){ 
000000  b40f              PUSH     {r0-r3}
000002  b510              PUSH     {r4,lr}
000004  b088              SUB      sp,sp,#0x20
;;;133    	char buffer[USART2_REC_LEN+1];  // 数据长度
;;;134    	uint8_t i = 0;	
000006  2400              MOVS     r4,#0
;;;135    	va_list arg_ptr;
;;;136    	va_start(arg_ptr, fmt);  
000008  a80b              ADD      r0,sp,#0x2c
00000a  9001              STR      r0,[sp,#4]
;;;137    	vsnprintf(buffer, USART2_REC_LEN+1, fmt, arg_ptr);
00000c  2115              MOVS     r1,#0x15
00000e  a802              ADD      r0,sp,#8
000010  9b01              LDR      r3,[sp,#4]
000012  9a0a              LDR      r2,[sp,#0x28]
000014  f7fffffe          BL       vsnprintf
;;;138    	while ((i < USART2_REC_LEN) && (i < strlen(buffer))){
000018  e00e              B        |L6.56|
                  |L6.26|
;;;139            USART_SendData(USART2, (uint8_t) buffer[i++]);
00001a  4620              MOV      r0,r4
00001c  1c62              ADDS     r2,r4,#1
00001e  b2d4              UXTB     r4,r2
000020  aa02              ADD      r2,sp,#8
000022  5c11              LDRB     r1,[r2,r0]
000024  480b              LDR      r0,|L6.84|
000026  f7fffffe          BL       USART_SendData
;;;140            while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); 
00002a  bf00              NOP      
                  |L6.44|
00002c  2140              MOVS     r1,#0x40
00002e  4809              LDR      r0,|L6.84|
000030  f7fffffe          BL       USART_GetFlagStatus
000034  2800              CMP      r0,#0
000036  d0f9              BEQ      |L6.44|
                  |L6.56|
000038  2c14              CMP      r4,#0x14              ;138
00003a  da04              BGE      |L6.70|
00003c  a802              ADD      r0,sp,#8              ;138
00003e  f7fffffe          BL       strlen
000042  42a0              CMP      r0,r4                 ;138
000044  d8e9              BHI      |L6.26|
                  |L6.70|
;;;141    	}
;;;142    	va_end(arg_ptr);
000046  2000              MOVS     r0,#0
000048  9001              STR      r0,[sp,#4]
;;;143    }
00004a  b008              ADD      sp,sp,#0x20
00004c  bc10              POP      {r4}
00004e  f85dfb14          LDR      pc,[sp],#0x14
;;;144    
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      0x40004400

                          AREA ||i.USART3_Configuration||, CODE, READONLY, ALIGN=2

                  USART3_Configuration PROC
;;;244    
;;;245    void USART3_Configuration(uint32_t bound,FunctionalState ITStatus){ //串口1初始化并启动
000000  b530              PUSH     {r4,r5,lr}
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;246        //GPIO端口设置
;;;247        GPIO_InitTypeDef GPIO_InitStructure;
;;;248    	USART_InitTypeDef USART_InitStructure;
;;;249    	NVIC_InitTypeDef NVIC_InitStructure;	 
;;;250    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);	//使能USART1时钟
000008  2101              MOVS     r1,#1
00000a  0488              LSLS     r0,r1,#18
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;251        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);  
000010  2101              MOVS     r1,#1
000012  2004              MOVS     r0,#4
000014  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;252    	GPIO_PinAFConfig(GPIOC,GPIO_PinSource10,GPIO_AF_USART3); //GPIOC10复用为USART1
000018  2207              MOVS     r2,#7
00001a  210a              MOVS     r1,#0xa
00001c  4821              LDR      r0,|L7.164|
00001e  f7fffffe          BL       GPIO_PinAFConfig
;;;253    	GPIO_PinAFConfig(GPIOC,GPIO_PinSource11,GPIO_AF_USART3); //GPIOC13复用为USART1
000022  2207              MOVS     r2,#7
000024  210b              MOVS     r1,#0xb
000026  481f              LDR      r0,|L7.164|
000028  f7fffffe          BL       GPIO_PinAFConfig
;;;254        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11; //GPIOC10与GPIOC11
00002c  f44f6040          MOV      r0,#0xc00
000030  9005              STR      r0,[sp,#0x14]
;;;255    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000032  2002              MOVS     r0,#2
000034  f88d0018          STRB     r0,[sp,#0x18]
;;;256    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
000038  f88d0019          STRB     r0,[sp,#0x19]
;;;257    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
00003c  2000              MOVS     r0,#0
00003e  f88d001a          STRB     r0,[sp,#0x1a]
;;;258    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
000042  2001              MOVS     r0,#1
000044  f88d001b          STRB     r0,[sp,#0x1b]
;;;259    	GPIO_Init(GPIOC,&GPIO_InitStructure); 
000048  a905              ADD      r1,sp,#0x14
00004a  4816              LDR      r0,|L7.164|
00004c  f7fffffe          BL       GPIO_Init
;;;260       //Usart1 NVIC 配置
;;;261        NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000050  2027              MOVS     r0,#0x27
000052  f88d0000          STRB     r0,[sp,#0]
;;;262    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3
000056  2003              MOVS     r0,#3
000058  f88d0001          STRB     r0,[sp,#1]
;;;263    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
00005c  f88d0002          STRB     r0,[sp,#2]
;;;264    	NVIC_InitStructure.NVIC_IRQChannelCmd = ITStatus;			//IRQ通道使能
000060  f88d4003          STRB     r4,[sp,#3]
;;;265    	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器 
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       NVIC_Init
;;;266       //USART 初始化设置
;;;267    	USART_InitStructure.USART_BaudRate = bound;//一般设置为9600;
00006a  9501              STR      r5,[sp,#4]
;;;268    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
00006c  2000              MOVS     r0,#0
00006e  f8ad0008          STRH     r0,[sp,#8]
;;;269    	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000072  f8ad000a          STRH     r0,[sp,#0xa]
;;;270    	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
000076  f8ad000c          STRH     r0,[sp,#0xc]
;;;271    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
00007a  f8ad0010          STRH     r0,[sp,#0x10]
;;;272    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
00007e  200c              MOVS     r0,#0xc
000080  f8ad000e          STRH     r0,[sp,#0xe]
;;;273        USART_Init(USART3, &USART_InitStructure); //初始化串口
000084  a901              ADD      r1,sp,#4
000086  4808              LDR      r0,|L7.168|
000088  f7fffffe          BL       USART_Init
;;;274        USART_ITConfig(USART3, USART_IT_RXNE, ITStatus);//开启ENABLE/关闭DISABLE中断
00008c  4622              MOV      r2,r4
00008e  f2405125          MOV      r1,#0x525
000092  4805              LDR      r0,|L7.168|
000094  f7fffffe          BL       USART_ITConfig
;;;275        USART_Cmd(USART3, ENABLE);                    //使能串口 
000098  2101              MOVS     r1,#1
00009a  4803              LDR      r0,|L7.168|
00009c  f7fffffe          BL       USART_Cmd
;;;276    }
0000a0  b007              ADD      sp,sp,#0x1c
0000a2  bd30              POP      {r4,r5,pc}
;;;277    
                          ENDP

                  |L7.164|
                          DCD      0x40020800
                  |L7.168|
                          DCD      0x40004800

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  USART3_IRQHandler PROC
;;;278    //串口3中断服务程序（固定的函数名不能修改）
;;;279    void USART3_IRQHandler(void){ 	
000000  b510              PUSH     {r4,lr}
;;;280        uint8_t Res;
;;;281    	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET){  //接收中断(接收到的数据必须是0x0d 0x0a结尾)		
000002  f2405125          MOV      r1,#0x525
000006  481f              LDR      r0,|L8.132|
000008  f7fffffe          BL       USART_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d038              BEQ      |L8.130|
;;;282    		Res=USART_ReceiveData(USART3);//读取接收到的数据
000010  481c              LDR      r0,|L8.132|
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c4              UXTB     r4,r0
;;;283    		printf("%c",Res); //把收到的数据发送回电脑
000018  4621              MOV      r1,r4
00001a  a01b              ADR      r0,|L8.136|
00001c  f7fffffe          BL       __2printf
;;;284            if((USART3_RX_STA&0x8000)==0)//接收未完成
000020  481a              LDR      r0,|L8.140|
000022  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000024  f4004000          AND      r0,r0,#0x8000
000028  bb58              CBNZ     r0,|L8.130|
;;;285    		{
;;;286    			if(USART3_RX_STA&0x4000)//接收到了0x0d
00002a  4818              LDR      r0,|L8.140|
00002c  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
00002e  f4004080          AND      r0,r0,#0x4000
000032  b160              CBZ      r0,|L8.78|
;;;287    			{
;;;288    				if(Res!=0x0a)USART3_RX_STA=0;//接收错误,重新开始
000034  2c0a              CMP      r4,#0xa
000036  d003              BEQ      |L8.64|
000038  2000              MOVS     r0,#0
00003a  4914              LDR      r1,|L8.140|
00003c  8008              STRH     r0,[r1,#0]
00003e  e020              B        |L8.130|
                  |L8.64|
;;;289    				else USART3_RX_STA|=0x8000;	//接收完成了 
000040  4812              LDR      r0,|L8.140|
000042  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000044  f4404000          ORR      r0,r0,#0x8000
000048  4910              LDR      r1,|L8.140|
00004a  8008              STRH     r0,[r1,#0]
00004c  e019              B        |L8.130|
                  |L8.78|
;;;290    			}
;;;291    			else //还没收到0X0D
;;;292    			{	
;;;293    				if(Res==0x0d)USART3_RX_STA|=0x4000;
00004e  2c0d              CMP      r4,#0xd
000050  d106              BNE      |L8.96|
000052  480e              LDR      r0,|L8.140|
000054  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000056  f4404080          ORR      r0,r0,#0x4000
00005a  490c              LDR      r1,|L8.140|
00005c  8008              STRH     r0,[r1,#0]
00005e  e010              B        |L8.130|
                  |L8.96|
;;;294    				else
;;;295    				{
;;;296    					USART3_RX_BUF[USART3_RX_STA&0X3FFF]=Res ;
000060  480a              LDR      r0,|L8.140|
000062  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000064  f3c0000d          UBFX     r0,r0,#0,#14
000068  4909              LDR      r1,|L8.144|
00006a  540c              STRB     r4,[r1,r0]
;;;297    					USART3_RX_STA++;
00006c  4807              LDR      r0,|L8.140|
00006e  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000070  1c40              ADDS     r0,r0,#1
000072  4906              LDR      r1,|L8.140|
000074  8008              STRH     r0,[r1,#0]
;;;298    					if(USART3_RX_STA>(USART3_REC_LEN-1))USART3_RX_STA=0;//接收数据错误,重新开始接收	  
000076  4608              MOV      r0,r1
000078  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
00007a  2813              CMP      r0,#0x13
00007c  dd01              BLE      |L8.130|
00007e  2000              MOVS     r0,#0
000080  8008              STRH     r0,[r1,#0]
                  |L8.130|
;;;299    				}		 
;;;300    			}
;;;301    		}   	
;;;302    	} 
;;;303    } 
000082  bd10              POP      {r4,pc}
;;;304    #endif	
                          ENDP

                  |L8.132|
                          DCD      0x40004800
                  |L8.136|
000088  256300            DCB      "%c",0
00008b  00                DCB      0
                  |L8.140|
                          DCD      USART3_RX_STA
                  |L8.144|
                          DCD      USART3_RX_BUF

                          AREA ||i.USART3_printf||, CODE, READONLY, ALIGN=2

                  USART3_printf PROC
;;;231    */
;;;232    void USART3_printf (char *fmt, ...){ 
000000  b40f              PUSH     {r0-r3}
000002  b510              PUSH     {r4,lr}
000004  b088              SUB      sp,sp,#0x20
;;;233    	char buffer[USART3_REC_LEN+1];  // 数据长度
;;;234    	uint8_t i = 0;	
000006  2400              MOVS     r4,#0
;;;235    	va_list arg_ptr;
;;;236    	va_start(arg_ptr, fmt);  
000008  a80b              ADD      r0,sp,#0x2c
00000a  9001              STR      r0,[sp,#4]
;;;237    	vsnprintf(buffer, USART3_REC_LEN+1, fmt, arg_ptr);
00000c  2115              MOVS     r1,#0x15
00000e  a802              ADD      r0,sp,#8
000010  9b01              LDR      r3,[sp,#4]
000012  9a0a              LDR      r2,[sp,#0x28]
000014  f7fffffe          BL       vsnprintf
;;;238    	while ((i < USART3_REC_LEN) && (i < strlen(buffer))){
000018  e00e              B        |L9.56|
                  |L9.26|
;;;239            USART_SendData(USART3, (uint8_t) buffer[i++]);
00001a  4620              MOV      r0,r4
00001c  1c62              ADDS     r2,r4,#1
00001e  b2d4              UXTB     r4,r2
000020  aa02              ADD      r2,sp,#8
000022  5c11              LDRB     r1,[r2,r0]
000024  480b              LDR      r0,|L9.84|
000026  f7fffffe          BL       USART_SendData
;;;240            while (USART_GetFlagStatus(USART3, USART_FLAG_TC) == RESET); 
00002a  bf00              NOP      
                  |L9.44|
00002c  2140              MOVS     r1,#0x40
00002e  4809              LDR      r0,|L9.84|
000030  f7fffffe          BL       USART_GetFlagStatus
000034  2800              CMP      r0,#0
000036  d0f9              BEQ      |L9.44|
                  |L9.56|
000038  2c14              CMP      r4,#0x14              ;238
00003a  da04              BGE      |L9.70|
00003c  a802              ADD      r0,sp,#8              ;238
00003e  f7fffffe          BL       strlen
000042  42a0              CMP      r0,r4                 ;238
000044  d8e9              BHI      |L9.26|
                  |L9.70|
;;;241    	}
;;;242    	va_end(arg_ptr);
000046  2000              MOVS     r0,#0
000048  9001              STR      r0,[sp,#4]
;;;243    }
00004a  b008              ADD      sp,sp,#0x20
00004c  bc10              POP      {r4}
00004e  f85dfb14          LDR      pc,[sp],#0x14
;;;244    
                          ENDP

000052  0000              DCW      0x0000
                  |L9.84|
                          DCD      0x40004800

                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;12     //定义_sys_exit()以避免使用半主机模式    
;;;13     void _sys_exit(int x){ 
000000  bf00              NOP      
;;;14     	x = x; 
;;;15     } 
000002  4770              BX       lr
;;;16     //重定义fputc函数 
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;16     //重定义fputc函数 
;;;17     int fputc(int ch, FILE *f){      
000000  bf00              NOP      
                  |L11.2|
;;;18     	while((USART_n->SR&0X40)==0);//循环发送,直到发送完毕   
000002  4a05              LDR      r2,|L11.24|
000004  8812              LDRH     r2,[r2,#0]
000006  f0020240          AND      r2,r2,#0x40
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L11.2|
;;;19         USART_n->DR = (uint8_t) ch;      
00000e  b2c2              UXTB     r2,r0
000010  4b01              LDR      r3,|L11.24|
000012  809a              STRH     r2,[r3,#4]
;;;20     	return ch;
;;;21     }
000014  4770              BX       lr
;;;22     #endif 
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USART1_RX_BUF
                          %        20
                  USART2_RX_BUF
                          %        20
                  USART3_RX_BUF
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  USART1_RX_STA
000004  0000              DCW      0x0000
                  USART2_RX_STA
000006  0000              DCW      0x0000
                  USART3_RX_STA
000008  0000              DCW      0x0000

;*** Start embedded assembler ***

#line 1 "..\\Connectivity\\USART\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REV16|
#line 129 "..\\CMSIS\\core_cmInstr.h"
|__asm___7_usart_c_9275e5e5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REVSH|
#line 144
|__asm___7_usart_c_9275e5e5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
