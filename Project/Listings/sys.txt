; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\sys.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\sys.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Basic\inc -I..\CMSIS -I..\Connectivity\IIC -I..\Connectivity\SPI -I..\Connectivity\USART -I..\HardWare\BMM150 -I..\HardWare\BUZZER -I..\HardWare\LED -I..\System\delay -I..\System\stm32f4xx_it -I..\System\sys -I..\System\system_stm32f4xx -I..\User -I..\System -I.\RTE\_Target_1 -ID:\ProgramFile\Keil5\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\ProgramFile\Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F405xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\sys.crf ..\System\sys\sys.c]
                          THUMB

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;35     //设置中断分组
;;;36     void NVIC_Configuration(void)  
000000  b510              PUSH     {r4,lr}
;;;37     { 
;;;38         NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);	
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;39     }
00000a  bd10              POP      {r4,pc}
;;;40     
                          ENDP


                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=1

                  RCC_Configuration PROC
;;;40     
;;;41     void RCC_Configuration(void)
000000  b538              PUSH     {r3-r5,lr}
;;;42     {
;;;43         ErrorStatus HSEStartUpStatus;
;;;44         RCC_DeInit();
000002  f7fffffe          BL       RCC_DeInit
;;;45         RCC_HSEConfig(RCC_HSE_ON); /* Enable HSE 使能外部高速晶振*/   
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       RCC_HSEConfig
;;;46     	HSEStartUpStatus = RCC_WaitForHSEStartUp(); /* Wait till HSE is ready 等待外部高速晶振使能完成*/   
00000c  f7fffffe          BL       RCC_WaitForHSEStartUp
000010  4604              MOV      r4,r0
;;;47     	if(HSEStartUpStatus == SUCCESS){   
000012  2c01              CMP      r4,#1
000014  d129              BNE      |L2.106|
;;;48     		/*设置PLL时钟源及倍频系数*/   
;;;49     		RCC_PLLConfig(RCC_PLLSource_HSE,8,336,2,7); //设置PLL时钟频率 
000016  2007              MOVS     r0,#7
000018  2302              MOVS     r3,#2
00001a  f44f72a8          MOV      r2,#0x150
00001e  2108              MOVS     r1,#8
000020  9000              STR      r0,[sp,#0]
000022  04c8              LSLS     r0,r1,#19
000024  f7fffffe          BL       RCC_PLLConfig
;;;50     		/*设置AHB时钟（HCLK）*/   
;;;51     		RCC_HCLKConfig(RCC_SYSCLK_Div1); //RCC_SYSCLK_Div1——AHB时钟 = 系统时钟(SYSCLK) = 168MHZ（外部晶振8HMZ）   
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       RCC_HCLKConfig
;;;52     		/*注意此处的设置，如果使用SYSTICK做延时程序，此时SYSTICK(Cortex System timer)=HCLK/8=9MHZ*/   
;;;53     		RCC_PCLK1Config(RCC_HCLK_Div4); //设置低速AHB时钟（PCLK1）,RCC_HCLK_Div4——APB1时钟 = HCLK/4 = 42MHZ（外部晶振8HMZ）   
00002e  f44f50a0          MOV      r0,#0x1400
000032  f7fffffe          BL       RCC_PCLK1Config
;;;54     		RCC_PCLK2Config(RCC_HCLK_Div2); //设置高速AHB时钟（PCLK2）,RCC_HCLK_Div1——APB2时钟 = HCLK = 84MHZ（外部晶振8HMZ）   
000036  0320              LSLS     r0,r4,#12
000038  f7fffffe          BL       RCC_PCLK2Config
;;;55     		/*注：AHB主要负责外部存储器时钟。APB2负责AD，I/O，高级TIM，串口1。APB1负责DA，USB，SPI，I2C，CAN，串口2，3，4，5，普通TIM */  
;;;56     		FLASH_SetLatency(FLASH_Latency_5); //设置FLASH存储器延时时钟周期数     
00003c  2005              MOVS     r0,#5
00003e  f7fffffe          BL       FLASH_SetLatency
;;;57     		FLASH_PrefetchBufferCmd(ENABLE); //选择FLASH预取指缓存的模式，预取指缓存使能 
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;58         //FLASH延迟参数需要参考电压与系统频率
;;;59     		RCC_PLLCmd(ENABLE);	//使能PLL
000048  2001              MOVS     r0,#1
00004a  f7fffffe          BL       RCC_PLLCmd
;;;60     		while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET); //等待PLL输出稳定   
00004e  bf00              NOP      
                  |L2.80|
000050  2039              MOVS     r0,#0x39
000052  f7fffffe          BL       RCC_GetFlagStatus
000056  2800              CMP      r0,#0
000058  d0fa              BEQ      |L2.80|
;;;61     		RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); //选择SYSCLK时钟源为PLL
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       RCC_SYSCLKConfig
;;;62     		while(RCC_GetSYSCLKSource() != 0x08); //等待PLL成为SYSCLK时钟源 
000060  bf00              NOP      
                  |L2.98|
000062  f7fffffe          BL       RCC_GetSYSCLKSource
000066  2808              CMP      r0,#8
000068  d1fb              BNE      |L2.98|
                  |L2.106|
;;;63         }
;;;64     }
00006a  bd38              POP      {r3-r5,pc}
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\System\\sys\\sys.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_WFI_SET____REV16|
#line 129 "..\\CMSIS\\core_cmInstr.h"
|__asm___5_sys_c_WFI_SET____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_sys_c_WFI_SET____REVSH|
#line 144
|__asm___5_sys_c_WFI_SET____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |WFI_SET|
#line 12 "..\\System\\sys\\sys.c"
|WFI_SET| PROC
#line 13

 WFI
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |INTX_DISABLE|
#line 17
|INTX_DISABLE| PROC
#line 18

 CPSID I
 BX LR 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |INTX_ENABLE|
#line 23
|INTX_ENABLE| PROC
#line 24

 CPSIE I
 BX LR 
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |MSR_MSP|
#line 30
|MSR_MSP| PROC
#line 31

 MSR MSP, r0  
 BX r14
	ENDP

;*** End   embedded assembler ***
