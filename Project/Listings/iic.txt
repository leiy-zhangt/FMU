; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\iic.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\iic.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Basic\inc -I..\CMSIS -I..\Connectivity\IIC -I..\Connectivity\SPI -I..\Connectivity\USART -I..\HardWare\BMM150 -I..\HardWare\BUZZER -I..\HardWare\LED -I..\System\delay -I..\System\stm32f4xx_it -I..\System\sys -I..\System\system_stm32f4xx -I..\User -I..\System -I.\RTE\_Target_1 -ID:\ProgramFile\Keil5\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -ID:\ProgramFile\Keil5\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DSTM32F405xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\iic.crf ..\Connectivity\IIC\iic.c]
                          THUMB

                          AREA ||i.I2C1_Configuration||, CODE, READONLY, ALIGN=2

                  I2C1_Configuration PROC
;;;4      
;;;5      void I2C1_Configuration(void)
000000  b500              PUSH     {lr}
;;;6      {
000002  b087              SUB      sp,sp,#0x1c
;;;7      	GPIO_InitTypeDef  GPIO_InitStructure;
;;;8      	I2C_InitTypeDef I2C_InitStructure;
;;;9      	//开启时钟
;;;10     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;11     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0548              LSLS     r0,r1,#21
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;12     	//配置引脚
;;;13     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000014  2002              MOVS     r0,#2
000016  f88d0018          STRB     r0,[sp,#0x18]
;;;14     	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
00001a  2001              MOVS     r0,#1
00001c  f88d001a          STRB     r0,[sp,#0x1a]
;;;15     	GPIO_InitStructure.GPIO_Pin = I2C1_SCL|I2C1_SDA;
000020  20c0              MOVS     r0,#0xc0
000022  9005              STR      r0,[sp,#0x14]
;;;16     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000024  2001              MOVS     r0,#1
000026  f88d001b          STRB     r0,[sp,#0x1b]
;;;17     	GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed;
00002a  2003              MOVS     r0,#3
00002c  f88d0019          STRB     r0,[sp,#0x19]
;;;18     	GPIO_Init(I2C1_Port,&GPIO_InitStructure);
000030  a905              ADD      r1,sp,#0x14
000032  4815              LDR      r0,|L1.136|
000034  f7fffffe          BL       GPIO_Init
;;;19     	//配置复用模式
;;;20     	GPIO_PinAFConfig(I2C1_Port,I2C1_Pinsourse_SCL,GPIO_AF_I2C1);
000038  2204              MOVS     r2,#4
00003a  2106              MOVS     r1,#6
00003c  4812              LDR      r0,|L1.136|
00003e  f7fffffe          BL       GPIO_PinAFConfig
;;;21     	GPIO_PinAFConfig(I2C1_Port,I2C1_Pinsourse_SDA,GPIO_AF_I2C1);
000042  2204              MOVS     r2,#4
000044  2107              MOVS     r1,#7
000046  4810              LDR      r0,|L1.136|
000048  f7fffffe          BL       GPIO_PinAFConfig
;;;22     	//配置I2C参数
;;;23     	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
00004c  f44f6080          MOV      r0,#0x400
000050  f8ad000e          STRH     r0,[sp,#0xe]
;;;24     	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000054  0100              LSLS     r0,r0,#4
000056  f8ad0010          STRH     r0,[sp,#0x10]
;;;25         I2C_InitStructure.I2C_ClockSpeed = I2C1_Speed;
00005a  480c              LDR      r0,|L1.140|
00005c  9001              STR      r0,[sp,#4]
;;;26         I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
00005e  f64b70ff          MOV      r0,#0xbfff
000062  f8ad000a          STRH     r0,[sp,#0xa]
;;;27         I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
000066  2000              MOVS     r0,#0
000068  f8ad0008          STRH     r0,[sp,#8]
;;;28         I2C_InitStructure.I2C_OwnAddress1 = 0X11;
00006c  2011              MOVS     r0,#0x11
00006e  f8ad000c          STRH     r0,[sp,#0xc]
;;;29         I2C_Init(I2C1,&I2C_InitStructure);
000072  a901              ADD      r1,sp,#4
000074  4806              LDR      r0,|L1.144|
000076  f7fffffe          BL       I2C_Init
;;;30         I2C_Cmd(I2C1,ENABLE);
00007a  2101              MOVS     r1,#1
00007c  4804              LDR      r0,|L1.144|
00007e  f7fffffe          BL       I2C_Cmd
;;;31     }
000082  b007              ADD      sp,sp,#0x1c
000084  bd00              POP      {pc}
;;;32     #endif
                          ENDP

000086  0000              DCW      0x0000
                  |L1.136|
                          DCD      0x40020400
                  |L1.140|
                          DCD      0x00055730
                  |L1.144|
                          DCD      0x40005400

                          AREA ||i.I2C2_Configuration||, CODE, READONLY, ALIGN=2

                  I2C2_Configuration PROC
;;;35     
;;;36     void I2C2_Configuration(void)
000000  b500              PUSH     {lr}
;;;37     {
000002  b087              SUB      sp,sp,#0x1c
;;;38     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;39     	I2C_InitTypeDef I2C_InitStructure;
;;;40     	//开启时钟
;;;41     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;42     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0588              LSLS     r0,r1,#22
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;43     	//配置引脚
;;;44     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000014  2002              MOVS     r0,#2
000016  f88d0018          STRB     r0,[sp,#0x18]
;;;45     	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
00001a  2001              MOVS     r0,#1
00001c  f88d001a          STRB     r0,[sp,#0x1a]
;;;46     	GPIO_InitStructure.GPIO_Pin = I2C2_SCL|I2C2_SDA;
000020  f44f6040          MOV      r0,#0xc00
000024  9005              STR      r0,[sp,#0x14]
;;;47     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000026  2001              MOVS     r0,#1
000028  f88d001b          STRB     r0,[sp,#0x1b]
;;;48     	GPIO_InitStructure.GPIO_Speed = GPIO_High_Speed;
00002c  2003              MOVS     r0,#3
00002e  f88d0019          STRB     r0,[sp,#0x19]
;;;49     	GPIO_Init(I2C2_Port,&GPIO_InitStructure);
000032  a905              ADD      r1,sp,#0x14
000034  4814              LDR      r0,|L2.136|
000036  f7fffffe          BL       GPIO_Init
;;;50     	//配置复用模式
;;;51     	GPIO_PinAFConfig(I2C2_Port,I2C2_Pinsourse_SCL,GPIO_AF_I2C2);
00003a  2204              MOVS     r2,#4
00003c  210a              MOVS     r1,#0xa
00003e  4812              LDR      r0,|L2.136|
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;52     	GPIO_PinAFConfig(I2C2_Port,I2C2_Pinsourse_SDA,GPIO_AF_I2C2);
000044  2204              MOVS     r2,#4
000046  210b              MOVS     r1,#0xb
000048  480f              LDR      r0,|L2.136|
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;53     	//配置I2C参数
;;;54     	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
00004e  f44f6080          MOV      r0,#0x400
000052  f8ad000e          STRH     r0,[sp,#0xe]
;;;55     	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000056  0100              LSLS     r0,r0,#4
000058  f8ad0010          STRH     r0,[sp,#0x10]
;;;56         I2C_InitStructure.I2C_ClockSpeed = I2C2_Speed;
00005c  480b              LDR      r0,|L2.140|
00005e  9001              STR      r0,[sp,#4]
;;;57         I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
000060  f64b70ff          MOV      r0,#0xbfff
000064  f8ad000a          STRH     r0,[sp,#0xa]
;;;58         I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
000068  2000              MOVS     r0,#0
00006a  f8ad0008          STRH     r0,[sp,#8]
;;;59         I2C_InitStructure.I2C_OwnAddress1 = 0X11;
00006e  2011              MOVS     r0,#0x11
000070  f8ad000c          STRH     r0,[sp,#0xc]
;;;60         I2C_Init(I2C2,&I2C_InitStructure);
000074  a901              ADD      r1,sp,#4
000076  4806              LDR      r0,|L2.144|
000078  f7fffffe          BL       I2C_Init
;;;61         I2C_Cmd(I2C2,ENABLE);
00007c  2101              MOVS     r1,#1
00007e  4804              LDR      r0,|L2.144|
000080  f7fffffe          BL       I2C_Cmd
;;;62     }
000084  b007              ADD      sp,sp,#0x1c
000086  bd00              POP      {pc}
;;;63     
                          ENDP

                  |L2.136|
                          DCD      0x40020400
                  |L2.140|
                          DCD      0x00055730
                  |L2.144|
                          DCD      0x40005800

                          AREA ||i.I2C_ReadBuffer||, CODE, READONLY, ALIGN=2

                  I2C_ReadBuffer PROC
;;;118    
;;;119    void I2C_ReadBuffer(I2C_TypeDef* I2C,uint8_t SlaveAddr,uint8_t ReadAddr,uint8_t* buffer,u16 length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    { //I2C读取数据串（器件地址，寄存器，内部地址，数量）
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
00000c  9d06              LDR      r5,[sp,#0x18]
;;;121        while(I2C_GetFlagStatus(I2C,I2C_FLAG_BUSY));
00000e  bf00              NOP      
                  |L3.16|
000010  f44f3100          MOV      r1,#0x20000
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       I2C_GetFlagStatus
00001a  2800              CMP      r0,#0
00001c  d1f8              BNE      |L3.16|
;;;122        I2C_GenerateSTART(I2C,ENABLE);//开启信号
00001e  2101              MOVS     r1,#1
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       I2C_GenerateSTART
;;;123        while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_MODE_SELECT));	//清除 EV5
000026  bf00              NOP      
                  |L3.40|
000028  492a              LDR      r1,|L3.212|
00002a  4638              MOV      r0,r7
00002c  f7fffffe          BL       I2C_CheckEvent
000030  2800              CMP      r0,#0
000032  d0f9              BEQ      |L3.40|
;;;124        I2C_Send7bitAddress(I2C,SlaveAddr,I2C_Direction_Transmitter); //写入器件地址
000034  2200              MOVS     r2,#0
000036  4641              MOV      r1,r8
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       I2C_Send7bitAddress
;;;125        while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));//清除 EV6
00003e  bf00              NOP      
                  |L3.64|
000040  4925              LDR      r1,|L3.216|
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       I2C_CheckEvent
000048  2800              CMP      r0,#0
00004a  d0f9              BEQ      |L3.64|
;;;126        //	I2C_Cmd(I2C,ENABLE);
;;;127        I2C_SendData(I2C,ReadAddr); //发送读的地址
00004c  4631              MOV      r1,r6
00004e  4638              MOV      r0,r7
000050  f7fffffe          BL       I2C_SendData
;;;128        while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED)); //清除 EV8
000054  bf00              NOP      
                  |L3.86|
000056  4920              LDR      r1,|L3.216|
000058  1c89              ADDS     r1,r1,#2
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       I2C_CheckEvent
000060  2800              CMP      r0,#0
000062  d0f8              BEQ      |L3.86|
;;;129        I2C_GenerateSTART(I2C,ENABLE); //开启信号
000064  2101              MOVS     r1,#1
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       I2C_GenerateSTART
;;;130        while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_MODE_SELECT)); //清除 EV5
00006c  bf00              NOP      
                  |L3.110|
00006e  4919              LDR      r1,|L3.212|
000070  4638              MOV      r0,r7
000072  f7fffffe          BL       I2C_CheckEvent
000076  2800              CMP      r0,#0
000078  d0f9              BEQ      |L3.110|
;;;131        I2C_Send7bitAddress(I2C,SlaveAddr,I2C_Direction_Receiver); //将器件地址传出，主机为读
00007a  2201              MOVS     r2,#1
00007c  4641              MOV      r1,r8
00007e  4638              MOV      r0,r7
000080  f7fffffe          BL       I2C_Send7bitAddress
;;;132        while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)); //清除EV6
000084  bf00              NOP      
                  |L3.134|
000086  4913              LDR      r1,|L3.212|
000088  1c49              ADDS     r1,r1,#1
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       I2C_CheckEvent
000090  2800              CMP      r0,#0
000092  d0f8              BEQ      |L3.134|
;;;133        while(length){
000094  e016              B        |L3.196|
                  |L3.150|
;;;134            if(length == 1){ //只剩下最后一个数据时进入 if 语句
000096  2d01              CMP      r5,#1
000098  d107              BNE      |L3.170|
;;;135                I2C_AcknowledgeConfig(I2C,DISABLE); //最后有一个数据时关闭应答位
00009a  2100              MOVS     r1,#0
00009c  4638              MOV      r0,r7
00009e  f7fffffe          BL       I2C_AcknowledgeConfig
;;;136                I2C_GenerateSTOP(I2C,ENABLE);	//最后一个数据时使能停止位
0000a2  2101              MOVS     r1,#1
0000a4  4638              MOV      r0,r7
0000a6  f7fffffe          BL       I2C_GenerateSTOP
                  |L3.170|
;;;137            }
;;;138            if(I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_RECEIVED)){ //读取数据
0000aa  490a              LDR      r1,|L3.212|
0000ac  313f              ADDS     r1,r1,#0x3f
0000ae  4638              MOV      r0,r7
0000b0  f7fffffe          BL       I2C_CheckEvent
0000b4  b130              CBZ      r0,|L3.196|
;;;139                *buffer = I2C_ReceiveData(I2C);//调用库函数将数据取出到 pBuffer
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       I2C_ReceiveData
0000bc  7020              STRB     r0,[r4,#0]
;;;140                buffer++; //指针移位
0000be  1c64              ADDS     r4,r4,#1
;;;141                length--; //字节数减 1 
0000c0  1e68              SUBS     r0,r5,#1
0000c2  b285              UXTH     r5,r0
                  |L3.196|
0000c4  2d00              CMP      r5,#0                 ;133
0000c6  d1e6              BNE      |L3.150|
;;;142            }
;;;143        }
;;;144        I2C_AcknowledgeConfig(I2C,ENABLE);
0000c8  2101              MOVS     r1,#1
0000ca  4638              MOV      r0,r7
0000cc  f7fffffe          BL       I2C_AcknowledgeConfig
;;;145    }
0000d0  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  |L3.212|
                          DCD      0x00030001
                  |L3.216|
                          DCD      0x00070082

                          AREA ||i.I2C_ReadByte||, CODE, READONLY, ALIGN=2

                  I2C_ReadByte PROC
;;;96     
;;;97     uint8_t I2C_ReadByte(I2C_TypeDef* I2C,uint8_t SlaveAddr,uint8_t ReadAddr)      //I2C读取一个字节
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;98     { 
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;99         uint8_t res;
;;;100    	while(I2C_GetFlagStatus(I2C,I2C_FLAG_BUSY));
00000a  bf00              NOP      
                  |L4.12|
00000c  f44f3100          MOV      r1,#0x20000
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       I2C_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d1f8              BNE      |L4.12|
;;;101    	I2C_GenerateSTART(I2C,ENABLE);
00001a  2101              MOVS     r1,#1
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       I2C_GenerateSTART
;;;102    	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_MODE_SELECT));
000022  bf00              NOP      
                  |L4.36|
000024  4928              LDR      r1,|L4.200|
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       I2C_CheckEvent
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L4.36|
;;;103    	I2C_Send7bitAddress(I2C,SlaveAddr,I2C_Direction_Transmitter); 
000030  2200              MOVS     r2,#0
000032  4631              MOV      r1,r6
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       I2C_Send7bitAddress
;;;104    	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
00003a  bf00              NOP      
                  |L4.60|
00003c  4923              LDR      r1,|L4.204|
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       I2C_CheckEvent
000044  2800              CMP      r0,#0
000046  d0f9              BEQ      |L4.60|
;;;105    	I2C_SendData(I2C,ReadAddr);
000048  4621              MOV      r1,r4
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       I2C_SendData
;;;106    	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
000050  bf00              NOP      
                  |L4.82|
000052  491e              LDR      r1,|L4.204|
000054  1c89              ADDS     r1,r1,#2
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       I2C_CheckEvent
00005c  2800              CMP      r0,#0
00005e  d0f8              BEQ      |L4.82|
;;;107    	I2C_GenerateSTART(I2C,ENABLE);
000060  2101              MOVS     r1,#1
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       I2C_GenerateSTART
;;;108    	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_MODE_SELECT));
000068  bf00              NOP      
                  |L4.106|
00006a  4917              LDR      r1,|L4.200|
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       I2C_CheckEvent
000072  2800              CMP      r0,#0
000074  d0f9              BEQ      |L4.106|
;;;109    	I2C_Send7bitAddress(I2C,SlaveAddr,I2C_Direction_Receiver);
000076  2201              MOVS     r2,#1
000078  4631              MOV      r1,r6
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       I2C_Send7bitAddress
;;;110    	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
000080  bf00              NOP      
                  |L4.130|
000082  4911              LDR      r1,|L4.200|
000084  1c49              ADDS     r1,r1,#1
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       I2C_CheckEvent
00008c  2800              CMP      r0,#0
00008e  d0f8              BEQ      |L4.130|
;;;111    	I2C_AcknowledgeConfig(I2C,DISABLE); //最后有一个数据时关闭应答位
000090  2100              MOVS     r1,#0
000092  4628              MOV      r0,r5
000094  f7fffffe          BL       I2C_AcknowledgeConfig
;;;112    	I2C_GenerateSTOP(I2C,ENABLE);	//最后一个数据时使能停止位
000098  2101              MOVS     r1,#1
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       I2C_GenerateSTOP
;;;113        while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_RECEIVED));
0000a0  bf00              NOP      
                  |L4.162|
0000a2  4909              LDR      r1,|L4.200|
0000a4  313f              ADDS     r1,r1,#0x3f
0000a6  4628              MOV      r0,r5
0000a8  f7fffffe          BL       I2C_CheckEvent
0000ac  2800              CMP      r0,#0
0000ae  d0f8              BEQ      |L4.162|
;;;114        res = I2C_ReceiveData(I2C);
0000b0  4628              MOV      r0,r5
0000b2  f7fffffe          BL       I2C_ReceiveData
0000b6  4607              MOV      r7,r0
;;;115        I2C_AcknowledgeConfig(I2C,ENABLE);
0000b8  2101              MOVS     r1,#1
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       I2C_AcknowledgeConfig
;;;116    	return res;
0000c0  4638              MOV      r0,r7
;;;117    }
0000c2  e8bd81f0          POP      {r4-r8,pc}
;;;118    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L4.200|
                          DCD      0x00030001
                  |L4.204|
                          DCD      0x00070082

                          AREA ||i.I2C_SendBuffer||, CODE, READONLY, ALIGN=2

                  I2C_SendBuffer PROC
;;;79     
;;;80     void I2C_SendBuffer(I2C_TypeDef* I2C,uint8_t SlaveAddr,uint8_t WriteAddr,uint8_t *buffer,u16 length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;81     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;82         while(I2C_GetFlagStatus(I2C,I2C_FLAG_BUSY));
000010  bf00              NOP      
                  |L5.18|
000012  f44f3100          MOV      r1,#0x20000
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       I2C_GetFlagStatus
00001c  2800              CMP      r0,#0
00001e  d1f8              BNE      |L5.18|
;;;83         I2C_GenerateSTART(I2C,ENABLE);
000020  2101              MOVS     r1,#1
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       I2C_GenerateSTART
;;;84         while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_MODE_SELECT));	//清除 EV5
000028  bf00              NOP      
                  |L5.42|
00002a  491c              LDR      r1,|L5.156|
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       I2C_CheckEvent
000032  2800              CMP      r0,#0
000034  d0f9              BEQ      |L5.42|
;;;85     	I2C_Send7bitAddress(I2C,SlaveAddr, I2C_Direction_Transmitter); //写入器件地址
000036  2200              MOVS     r2,#0
000038  4639              MOV      r1,r7
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       I2C_Send7bitAddress
;;;86     	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));//清除 EV6
000040  bf00              NOP      
                  |L5.66|
000042  4917              LDR      r1,|L5.160|
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       I2C_CheckEvent
00004a  2800              CMP      r0,#0
00004c  d0f9              BEQ      |L5.66|
;;;87         I2C_SendData(I2C,WriteAddr); //内部功能地址
00004e  4629              MOV      r1,r5
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       I2C_SendData
;;;88     	while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));//移位寄存器非空，数据寄存器已空，产生EV8，发送数据到DR既清除该事件
000056  bf00              NOP      
                  |L5.88|
000058  4911              LDR      r1,|L5.160|
00005a  1c89              ADDS     r1,r1,#2
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       I2C_CheckEvent
000062  2800              CMP      r0,#0
000064  d0f8              BEQ      |L5.88|
;;;89     	while(length--){ //循环发送数据	
000066  e00c              B        |L5.130|
                  |L5.104|
;;;90     		I2C_SendData(I2C,*buffer); //发送数据
000068  7821              LDRB     r1,[r4,#0]
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       I2C_SendData
;;;91     		buffer++; //数据指针移位
000070  1c64              ADDS     r4,r4,#1
;;;92     		while (!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));//清除EV8
000072  bf00              NOP      
                  |L5.116|
000074  490a              LDR      r1,|L5.160|
000076  1c89              ADDS     r1,r1,#2
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       I2C_CheckEvent
00007e  2800              CMP      r0,#0
000080  d0f8              BEQ      |L5.116|
                  |L5.130|
000082  f1b80000          SUBS     r0,r8,#0              ;89
000086  f1a80101          SUB      r1,r8,#1              ;89
00008a  fa1ff881          UXTH     r8,r1                 ;89
00008e  d1eb              BNE      |L5.104|
;;;93     	}
;;;94     	I2C_GenerateSTOP(I2C,ENABLE);//产生停止信号
000090  2101              MOVS     r1,#1
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       I2C_GenerateSTOP
;;;95     }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;96     
                          ENDP

                  |L5.156|
                          DCD      0x00030001
                  |L5.160|
                          DCD      0x00070082

                          AREA ||i.I2C_SendByte||, CODE, READONLY, ALIGN=2

                  I2C_SendByte PROC
;;;66     
;;;67     void I2C_SendByte(I2C_TypeDef* I2C,uint8_t SlaveAddr,uint8_t WriteAddr,uint8_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;68     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;69         I2C_GenerateSTART(I2C,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       I2C_GenerateSTART
;;;70         while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_MODE_SELECT));
000014  bf00              NOP      
                  |L6.22|
000016  4918              LDR      r1,|L6.120|
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       I2C_CheckEvent
00001e  2800              CMP      r0,#0
000020  d0f9              BEQ      |L6.22|
;;;71         I2C_Send7bitAddress(I2C,SlaveAddr,I2C_Direction_Transmitter);
000022  2200              MOVS     r2,#0
000024  4639              MOV      r1,r7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       I2C_Send7bitAddress
;;;72         while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
00002c  bf00              NOP      
                  |L6.46|
00002e  4913              LDR      r1,|L6.124|
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       I2C_CheckEvent
000036  2800              CMP      r0,#0
000038  d0f9              BEQ      |L6.46|
;;;73         I2C_SendData(I2C,WriteAddr);
00003a  4621              MOV      r1,r4
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       I2C_SendData
;;;74         while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));    
000042  bf00              NOP      
                  |L6.68|
000044  490d              LDR      r1,|L6.124|
000046  1c89              ADDS     r1,r1,#2
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       I2C_CheckEvent
00004e  2800              CMP      r0,#0
000050  d0f8              BEQ      |L6.68|
;;;75         I2C_SendData(I2C,Data);
000052  4629              MOV      r1,r5
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       I2C_SendData
;;;76         while(!I2C_CheckEvent(I2C,I2C_EVENT_MASTER_BYTE_TRANSMITTED));
00005a  bf00              NOP      
                  |L6.92|
00005c  4907              LDR      r1,|L6.124|
00005e  1c89              ADDS     r1,r1,#2
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       I2C_CheckEvent
000066  2800              CMP      r0,#0
000068  d0f8              BEQ      |L6.92|
;;;77         I2C_GenerateSTOP(I2C,ENABLE);
00006a  2101              MOVS     r1,#1
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       I2C_GenerateSTOP
;;;78     }
000072  e8bd81f0          POP      {r4-r8,pc}
;;;79     
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
                          DCD      0x00030001
                  |L6.124|
                          DCD      0x00070082

;*** Start embedded assembler ***

#line 1 "..\\Connectivity\\IIC\\iic.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_iic_c_d2c6737a____REV16|
#line 129 "..\\CMSIS\\core_cmInstr.h"
|__asm___5_iic_c_d2c6737a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_iic_c_d2c6737a____REVSH|
#line 144
|__asm___5_iic_c_d2c6737a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
